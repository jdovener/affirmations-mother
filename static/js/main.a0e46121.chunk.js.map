{"version":3,"sources":["Affirmations.js","AffirmationDatabase.js","Affirmation.js","App.js","reportWebVitals.js","index.js"],"names":["Affirmations","className","style","color","id","this","props","quote","Math","random","React","Component","quotes","Affirmation","useState","quotesArray","setQuotesArray","buttonIndex","setButtonIndex","useEffect","tempQuotes","sort","tempArray","i","push","document","documentElement","backgroundColor","map","index","Fragment","onClick","App","handleClick","generateRandomQuote","randomQuote","setState","author","shuffleQuotes","state","randomNumber","floor","length","array","displayColor","randomColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a0e46121.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Affirmations extends React.Component {\n    render() {\n\n    return(\n    <div\n    className=\"fadeIn\"\n    key={Math.random()}\n    style={{ color: \"grey\" }}\n    >\n    <h1 id=\"quote\">\"{this.props.quote}\"</h1>\n    </div>)\n    }\n}\n\nexport default Affirmations;","const quotes=[\n    {\n    \"quote\": \"I have a son that loves me!\"\n    }, {\n    \"quote\": \"I am creative\"\n    }, {\n    \"quote\": \"I am capable of reaching my goals\"\n    }, {\n    \"quote\": \"I have achieved a lot\"\n    }, {\n    \"quote\": \"I am smart\"\n    }, {\n    \"quote\": \"I exist against all odds\"\n    }, {\n    \"quote\": \"I live on a beautiful planet\"\n    }, {\n    \"quote\": \"I am thoughtful\"\n    }, {\n    \"quote\": \"I stand up for my beliefs\"\n    }, {\n    \"quote\": \"I have parents that love me\"\n    }, {\n    \"quote\": \"I am dedicated\"\n    }, {\n    \"quote\": \"Everything will always work out in the end\"\n    }, {\n    \"quote\": \"Help is available if I need it\"\n    }, {\n    \"quote\": \"My life is filled with opportunity\"\n    }, {\n    \"quote\": \"I am talented\"\n    }, {\n    \"quote\": \"None of my limbs are impaired\"\n    }, {\n    \"quote\": \"I am appreciative to the people in my life\"\n    }, {\n    \"quote\": \"I am considerate\"\n    }, {\n    \"quote\": \"I have led an interesting life\"\n    }, {\n    \"quote\": \"I laugh often\"\n    }, {\n    \"quote\": \"My son made this website for me out of love\"\n    }, {\n    \"quote\": \"I am lucky to live in the day and age that I do\"\n    }, {\n    \"quote\": \"I enjoy deep discussion\"\n    }, {\n    \"quote\": \"I make friends easily\"\n    }, {\n    \"quote\": \"I am not the only one who struggles\"\n    }, {\n    \"quote\": \"Negative thoughts detract nothing from positive thoughts\"\n    }, {\n    \"quote\": \"I am more capable than I give myself credit for\"\n    }, {\n    \"quote\": \"Life goes on\"\n    }, {\n    \"quote\": \"I trust myself\"\n    }, {\n    \"quote\": \"I don't need other people's approval\"\n    }, {\n    \"quote\": \"I am human; I make mistakes\"\n    }, {\n    \"quote\": \"It's ok to change my mind\"\n    }, {\n    \"quote\": \"I can admit my flaws\"\n    }, {\n    \"quote\": \"Uv oo xx\"\n    }, {\n    \"quote\": \"I am independent\"\n    }, {\n    \"quote\": \"Nothing is permanent\"\n    }, {\n    \"quote\": \"I am always willing to help others\"\n    }\n]\nexport default quotes","import React, { useEffect, useState } from \"react\";\nimport Affirmations from \"./Affirmations\";\nimport quotes from \"./AffirmationDatabase\";\n\nfunction Affirmation (props) {\n\n  const [quotesArray, setQuotesArray] = useState([]);\n\n  const [buttonIndex, setButtonIndex] = useState(0);\n\n  useEffect (() => {\n    const tempQuotes = quotes.sort(() => Math.random() - 0.5);\n    const tempArray = [];\n    for (let i = 0; i < 3; i +=1) {\n      tempArray.push(tempQuotes[i])\n    };\n    setQuotesArray(tempArray);\n  }, [buttonIndex]\n    )\n\n    const html = document.documentElement;\n    html.style.backgroundColor = \"black\";\n\n    return (\n      <div style={{ backgroundColor: \"white\" }} className=\"quotebox\">\n        {quotesArray.map(index => (<React.Fragment key={index.quote}><Affirmations quote={index.quote}/></React.Fragment>))}\n        <button\n          style={{ backgroundColor: \"grey\" }}\n          id=\"newquote\"\n          onClick={() => {let randomNumber = buttonIndex + 1 \n            setButtonIndex(randomNumber)}}\n        >\n          Affirmations\n        </button>\n      </div>\n    );\n}\n\nexport default Affirmation;","import React from \"react\";\nimport Affirmation from \"./Affirmation\";\nimport quotes from './AffirmationDatabase';\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      quote: quotes[0].quote,\n      author: quotes[0].author,\n    };\n  }\n  randomQuote() {\n    const randomNumber = Math.floor(Math.random() * quotes.length);\n    return quotes[randomNumber];\n    \n  }\n  shuffleQuotes(array){\n    return array.sort(()=>Math.random()-0.5)\n  }\n\n  handleClick = () => {\n    const generateRandomQuote = this.randomQuote();\n    this.setState({\n      quote: generateRandomQuote.quote,\n      author: generateRandomQuote.author\n    });\n    this.shuffleQuotes(quotes)\n  };\n  \n  render() {\n    return (\n      <div>\n        <Affirmation\n          displayColor={this.randomColor}\n          handleClick={this.handleClick}\n          {...this.state}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}